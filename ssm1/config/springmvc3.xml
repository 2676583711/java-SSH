<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop.xsd
        http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx.xsd
        http://www.springframework.org/schema/mvc
        http://www.springframework.org/schema/mvc/spring-mvc.xsd">

	<!-- 这个配置文件是注解版本的,注解处理器映射器、适配器 -->

	<!-- 配置拦截器 -->
	<mvc:interceptors>
		<mvc:interceptor>   <!--path="/**" 表示拦截所有,/*仅仅拦截根部份，／＊＊拦截所有的包括子部分 -->
			<mvc:mapping path="/**" />    <!-- -->
			<bean class="cn.zhou.intercepter.MyIntercepter"></bean>
		</mvc:interceptor>

		<mvc:interceptor>   <!--path="/**" 表示拦截所有,/*仅仅拦截根部份，／＊＊拦截所有的包括子部分 -->
			<mvc:mapping path="/**" />    <!-- -->
			<bean class="cn.zhou.intercepter.MyIntercepter2"></bean>
		</mvc:interceptor>
	</mvc:interceptors>

	<!-- 静态资源的解析,配置这个访问静态资源 -->
	<mvc:resources location="/" mapping="/*.html"></mvc:resources>


	<!-- 配置ｈａｎｄｌｅｒ处理器 ，这个单个配置可以，但多个不方便，所以有包级别的扫描 -->
	<!-- <bean class="cn.zhou.controller.AnnotationController"></bean> -->

	<!--包级别，多个ｈａｎｄｌｅｒ扫描: -->

	<context:component-scan
		base-package="cn.zhou.controller" />



	<!--注解处理器映射器 -->
	<!-- <bean class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping"></bean> -->


	<!--注解处理器适配器 -->
	<!-- <bean class=" org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter"></bean> -->


	<!--使用这个就可以代替上面的两个处理器映射器、适配器，并且这个配置默认加载一些参数绑定的方法, 如果使用这个配置，就不用配置json数据转换器 -->
	<mvc:annotation-driven validator="validator" />

	<!--配置视图解析器 -->
	<bean
		class="org.springframework.web.servlet.view.InternalResourceViewResolver">

		<!--配置前缀和后缀 -->
		<!-- <property name="prefix" value="/"></property> -->
		<!-- <property name="suffix" value=".jsp"></property> -->
	</bean>


	<!-- 配置全局异常处理器 -->
	<bean class="cn.zhou.exception.SystemException"></bean>

	<!--配置文件上传 -->
	<!-- <bean id="multipart" class=" org.springframework.web.multipart.MultipartResolver"> 
		<property name="maxUploadSize"> <value>1</value> </property> </bean> -->


	<!--使用spring 的校验器接口 -->
	<bean id="validator"
		class="org.springframework.validation.beanvalidation.LocalValidatorFactoryBean">
		<!--配置校验器,这里使用是hibernate 的validation校验器 -->
		<property name="providerClass"
			value=" org.hibernate.validator.HibernateValidator"></property>

		<!--配置校验所需要的信息的资源文件,如果不配置的话则默认使用classpath下的validationmessages.properies文件 -->
		<property name="validationMessageSource" ref="messageSource"></property>
	</bean>
	<bean id="messageSource"
		class="org.springframework.context.support.ReloadableResourceBundleMessageSource">
		<property name="basenames">
			<list>
				<value>classpath:message.properties</value>
			</list>
		</property>

		<!--编码的格式 -->
		<property name="fileEncoding" value="utf-8"></property>
		<!-- 加载时间 -->

		<property name="cacheSecods" value="120"></property>

	</bean>




</beans>

